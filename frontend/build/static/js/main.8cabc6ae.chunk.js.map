{"version":3,"sources":["pages/login/index.js","context/auth.js","helpers/appTheme/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","React","createContext","JSON","parse","localStorage","getItem","makeStyles","root","height","test","display","flexDirection","alignItems","submit","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","card","justify","paddingTop","LoginPage","useState","setEmail","setPassword","isLoading","setLoading","undefined","loginError","classes","handleEmailChange","event","target","value","handlePasswordChange","handleLogin","a","preventDefault","Grid","container","component","className","CssBaseline","item","xs","sm","md","elevation","square","Avatar","Alert","severity","onSubmit","TextField","label","variant","margin","name","required","fullWidth","onChange","type","Button","disabled","appTheme","createMuiTheme","mainColor","AppProvider","props","ThemeProvider","theme","children","AppRouter","path","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8cabc6ae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { TextField, makeStyles } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport { AuthContext } from \"../../context/auth\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: \"100%\",\r\n  },\r\n  test: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  submit: {\r\n    display: \"flex\",\r\n  },\r\n  image: {\r\n    backgroundImage:\r\n      \"url(https://source.unsplash.com/featured/?technology,hacker)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n    height: \"90vh\",\r\n  },\r\n  card: {\r\n    justify: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: \"20vh\",\r\n  },\r\n});\r\n\r\nexport default function LoginPage() {\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [isLoading, setLoading] = React.useState(false);\r\n  const [loginError, setLoginError] = React.useState(undefined);\r\n  // const { authState, setAuthState } = React.useContext(AuthContext);\r\n  const classes = useStyles();\r\n\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n\r\n    // Do something with email and password.\r\n    // If errored, do setLoginError(error), whereby error is an error message.\r\n    // setAuthState(....)\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const buildLoginError = () => {\r\n    return (\r\n      <>\r\n        <Alert severity=\"error\">Login failed</Alert>\r\n        <br></br>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const buildLoginForm = () => {\r\n    return (\r\n      <Grid container component=\"main\" className={classes.root}>\r\n        <CssBaseline />\r\n        <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={8}\r\n          md={5}\r\n          elevation={6}\r\n          className={classes.card}\r\n          square=\"true\"\r\n        >\r\n          <div className={classes.test}>\r\n            <Avatar>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <h2>Login</h2>\r\n            {loginError !== undefined && buildLoginError()}\r\n            <form onSubmit={handleLogin}>\r\n              {/* email */}\r\n              <div>\r\n                <TextField\r\n                  label=\"email\"\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  name=\"email\"\r\n                  required\r\n                  fullWidth\r\n                  onChange={handleEmailChange}\r\n                />\r\n              </div>\r\n              {/* password */}\r\n              <div>\r\n                <TextField\r\n                  label=\"password\"\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  name=\"password\"\r\n                  required\r\n                  fullWidth\r\n                  type=\"password\"\r\n                  onChange={handlePasswordChange}\r\n                />\r\n              </div>\r\n              <br></br>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                type=\"submit\"\r\n                fullWidth\r\n                className={classes.submit}\r\n                disabled={isLoading}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  // Redirect the user to the homepage if they are already logged in\r\n  // tother wise show the login form\r\n  // if (authState.authenticated) {\r\n  // \treturn <Redirect to=\"/\" />;\r\n  // } else {\r\n    return buildLoginForm();\r\n  // }\r\n}\r\n","import React, { useReducer, useEffect } from \"react\";\r\n\r\nconst AuthContext = React.createContext();\r\nconst localState = JSON.parse(localStorage.getItem(\"authState\"));\r\nconst initialState = {\r\n  authenticated: false,\r\n  user: undefined,\r\n};\r\n\r\nconst reducer = (authState, newAuthState) => {\r\n  if (newAuthState === null) {\r\n    localStorage.removeItem(\"authState\");\r\n    return initialState;\r\n  }\r\n  return { ...authState, ...newAuthState };\r\n};\r\n\r\nconst AuthProvider = (props) => {\r\n  const [authState, setAuthState] = useReducer(\r\n    reducer,\r\n    localState || initialState\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"authState\", JSON.stringify(authState));\r\n  }, [authState]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authState, setAuthState }}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst appTheme = createMuiTheme({\r\n  // Add styling here e.g appGreen: \"#00ff00\", then reference it like theme.appGreen\r\n  mainColor: \"#4F7CE0\"\r\n});\r\n\r\nexport default appTheme;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\n//Components\r\n\r\n//Pages\r\nimport LoginPage from \"./pages/login\";\r\nimport appTheme from \"./helpers/appTheme\";\r\n\r\n//Context\r\n\r\nfunction AppProvider(props) {\r\n  return (\r\n    <ThemeProvider theme={appTheme}>\r\n      {/* <AuthProvider> */}\r\n        {props.children}\r\n      {/* </AuthProvider> */}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nfunction AppRouter(props) {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/login\" exact={true}>\r\n        <LoginPage />\r\n      </Route>\r\n      <Route>\r\n        <LoginPage />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppProvider>\r\n        <BrowserRouter>\r\n          <div>\r\n            <AppRouter />\r\n            {/* TODO: Fix this so it actually goes to the bottom of the page */}\r\n            {/* <Footer /> */}\r\n          </div>\r\n        </BrowserRouter>\r\n      </AppProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}